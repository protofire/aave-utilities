/* Autogenerated file. Do not edit manually. */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers';
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface IFaucetInterface extends ethers.utils.Interface {
  functions: {
    'mintAll()': FunctionFragment;
    'lastMintTime(address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'mintAll'): string;

  decodeFunctionResult(functionFragment: 'mintAll'): Result;

  encodeFunctionData(
    functionFragment: 'lastMintTime',
    values: [string],
  ): string;

  decodeFunctionResult(
    functionFragment: 'lastMintTime',
    data: BytesLike,
  ): Result;

  events: {};
}

export class IFaucet extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IFaucetInterface;

  functions: {
    mintAll(overrides?: PayableOverrides): Promise<ContractTransaction>;

    'mintAll()'(overrides?: PayableOverrides): Promise<ContractTransaction>;

    lastMintTime(
      user: string,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>;

    'lastMintTime(address)'(
      user: string,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>;
  };

  mintAll(overrides?: PayableOverrides): Promise<ContractTransaction>;

  'mintAll()'(overrides?: PayableOverrides): Promise<ContractTransaction>;

  lastMintTime(user: string, overrides?: PayableOverrides): Promise<BigNumber>;

  'lastMintTime(address)'(
    user: string,
    overrides?: PayableOverrides,
  ): Promise<BigNumber>;

  callStatic: {
    mintAll(overrides?: CallOverrides): Promise<void>;

    'mintAll()'(overrides?: CallOverrides): Promise<void>;

    lastMintTime(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'lastMintTime(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    mintAll(overrides?: PayableOverrides): Promise<BigNumber>;

    'mintAll()'(overrides?: PayableOverrides): Promise<BigNumber>;

    lastMintTime(
      user: string,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>;

    'lastMintTime(address)'(
      user: string,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    mintAll(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    'mintAll()'(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    lastMintTime(
      user: string,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>;

    'lastMintTime(address)'(
      user: string,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
